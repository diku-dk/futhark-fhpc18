#!/usr/bin/env python3
#
# Convert Rodinia BFS input to Futhark BFS input, so that the Futhark version
# can be run on the same datasets as the Rodinia version.
#
# The Rodinia input is generated by their 'graphgen.cpp' utility.

import sys
import re

def parse(filename):
    with open(filename) as f:
        d = f.read()
    ns = [int(n) for n in re.split(r'\s+', d.strip())]

    i = 0
    n_nodes = ns[i]
    i = 1
    j = i + n_nodes * 2
    nodes = ns[i:j]
    nodes = [(nodes[i], nodes[i + 1]) for i in range(0, n_nodes * 2, 2)]

    i = j
    source = ns[i]

    i += 1
    n_edges = ns[i]
    i += 1
    j = i + n_edges * 2
    edges = ns[i:j]
    edges = [(edges[i], edges[i + 1]) for i in range(0, n_edges * 2, 2)]

    return (source, nodes, edges)

def format_futhark(source, nodes, edges):
    a = str([start_index for start_index, _n_edges in nodes])
    b = str([n_edges for _start_index, n_edges in nodes])
    c = str([edges_dest for edges_dest, _edges_weight in edges])

    # Rodinia actually doesn't use the source variable, so we ignore it as well.
    return '\n'.join((a, b, c))

def main(args):
    try:
        filename = args[0]
    except IndexError:
        print('error: missing filename argument', file=sys.stderr)
        return 1

    source, nodes, edges = parse(filename)
    print(format_futhark(source, nodes, edges))

    return 0

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
